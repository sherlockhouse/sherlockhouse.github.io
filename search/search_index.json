{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u4fee\u6539\u8bb0\u5f55 \u76f8\u518c\u5f00\u53d1\u6587\u6863 \u4e00 . \u76ee\u5f55\u7ed3\u6784 \u4e8c . \u529f\u80fd\u6a21\u5757 \u4e09 . \u8be6\u7ec6\u8bbe\u8ba1 1. \u4e3b\u9898 2. \u5a92\u4f53\u6570\u636e\u7ed3\u6784 3. \u5168\u5c40\u6570\u636e\u7ba1\u7406\u5bf9\u8c61 4. \u754c\u9762\u5bfc\u822a 5. \u5a92\u4f53\u5355\u5f20\u9884\u89c8 \u56db . \u5173\u4e8e\u9886\u57df\u5c42 Domain Layer \u4fee\u6539\u8bb0\u5f55 \u00b6 \u7248\u672c \u4fee\u6539\u65e5\u671f \u4f5c\u8005 \u4fee\u6539\u5185\u5bb9 V1.0 2022.01.12 \u987e\u6797\u6210 \u521b\u5efa \u76f8\u518c\u5f00\u53d1\u6587\u6863 \u00b6 \u94fe\u63a5 https://sherlockhouse.github.io/ \u4e00 . \u76ee\u5f55\u7ed3\u6784 \u00b6 app/ \u251c\u2500\u2500 assets # tensorflow lite \u6a21\u578b\u6587\u4ef6\u7b49 \u251c\u2500\u2500 java \u2502 \u2514\u2500\u2500 core #\u4e3b\u8981\u7684\u62bd\u8c61\u6846\u67b6 \u2502 \u251c\u2500\u2500 customview #\u81ea\u5b9a\u4e49view \u2502 \u251c\u2500\u2500 db #\u81ea\u5b9a\u4e49\u6570\u636e\u5e93 \u2502 \u251c\u2500\u2500 di #\u5168\u5c40\u4f9d\u8d56\u6ce8\u5165 \u2502 \u251c\u2500\u2500 domain #\u9886\u57df \u2502 \u251c\u2500\u2500 models #MVVM - model \u2502 \u251c\u2500\u2500 repository #repository pattern \u2502 \u251c\u2500\u2500 ui #MVVM - view & viewmodel \u2502 \u2514\u2500\u2500 utils #\u5de5\u5177\u7c7b\u548c\u6269\u5c55\u51fd\u6570 google/ # \u539f\u751f\u5e73\u53f0\u53ef\u590d\u7528\u7684\u4ee3\u7801 matisse/ # \u77e5\u4e4e\u5f00\u6e90\u7684\u56fe\u7247\u9009\u62e9\u5e93 \u4e8c . \u529f\u80fd\u6a21\u5757 \u00b6 \u754c\u9762\u5bfc\u822a \u91c7\u7528ViewPager2 + Recyclerview + Fragment \u4ee3\u66ff\u539f\u751fOpenGL\u5b9e\u73b0 \u7f29\u7565\u56fe\u89e3\u7801 \u4f7f\u7528\u8c37\u6b4c\u7684Glide \u56fe\u7247\u9ad8\u6e05\u9884\u89c8 subsampling-scale-image-view\u3002\u53ea\u652f\u6301jpg\u548cpng \u667a\u80fd\u5206\u7c7b tensorflowlite. \u4f7f\u7528\u8c37\u6b4c\u5f00\u6e90\u7684\u9884\u8bad\u7ec3\u6a21\u578b,\u6a21\u578b\u6587\u4ef6\u5728asset\u76ee\u5f55 * \u7f16\u8f91 \u539f\u751f\u7684\u7f16\u8f91\u529f\u80fd,\u76ee\u5f55 /app/src/main/java/com/android/gallery3d/filtershow/ \u4fee\u6539\u4e86\u77e5\u4e4e\u5f00\u6e90\u7684matisse \u56fe\u7247\u9009\u62e9\u6a21\u5757 \u4e09 . \u8be6\u7ec6\u8bbe\u8ba1 \u00b6 1. \u4e3b\u9898 \u00b6 \u5728Android.manifest\u4e2d,\u914d\u7f6e. \u914d\u7f6e\u540e,\u5f53\u524dactivity\u4f1a\u5e94\u7528\u7cfb\u7edf\u6837\u5f0f.\u540c\u65f6\u81ea\u5b9a\u4e49\u6837\u5f0f\u5931\u6548\uff0c\u65e0\u6cd5\u4f7f\u7528compat\u548cmaterial\u4e3b\u9898. \u56e0\u6b64\u53ea\u7528\u4e8e\u975e\u91cd\u8981\u7684activity\u3002\u4e3bactivity\u63a7\u4ef6\u4e3b\u9898\u6548\u679c\u5b8c\u5168\u81ea\u5df1\u63a7\u5236\u3002 <meta-data android:name= \"com.freeme.app.theme\" android:value= \"freeme:style/Theme.Freeme.NoActionBar.DayNight\" /> 2. \u5a92\u4f53\u6570\u636e\u7ed3\u6784 \u00b6 \u56fe\u5e93\u6570\u636e\u4e3b\u8981\u5305\u62ec\u76f8\u518c\u76ee\u5f55\u548c\u5a92\u4f53\u6587\u4ef6 //\u5355\u4e2a\u7167\u7247 data class DetailMediaFile ( var id : Long , var name : String ? , var dateAdded : Long ? , var dateTaken : Long ? , var dateModified : Long ? , val uri : Uri , var path : String ? , var parentPath : String ? , var size : Long ? , var type : Int ? , var videoDuration : Int ? , var isFavorite : Boolean = false , var deletedTS : Long ? , var bucketId : Long ? , ) //\u76f8\u7247\u76ee\u5f55 data class DetailMediaSet ( val name : String , val id : Int , val dateAdded : Long , val dateTaken : Long , val uri : Uri , var count : Int , var order : Int , ) \u6570\u636e\u5bf9\u8c61\u5b9e\u73b0BaseListMediaFileItem\u63a5\u53e3\uff0c\u7528\u4e8e\u5728recyclerview\u4e2d\u914d\u7f6e\u4e0d\u540c\u7684viewholder\uff0c\u4ee5\u53ca\u4f7f\u7528DiffUtil open class BaseListMediaFileItem ( val viewType : Int ) { fun isSame ( other : BaseListMediaFileItem ): Boolean { if ( this is MediaFileItem && other is MediaFileItem ) { return this . detailMedia . uri == other . detailMedia . uri } else if ( this is MediaFileHeaderItem && other is MediaFileHeaderItem ) { return this . text == other . text } return false } var gridPosition : Int = 0 enum class Type { HEADER , DATA } data class MediaFileHeaderItem ( val text : String ) : BaseListMediaFileItem ( Type . HEADER . ordinal ) } 3. \u5168\u5c40\u6570\u636e\u7ba1\u7406\u5bf9\u8c61 \u00b6 MediaDataManager\u4e3a\u5168\u5c40\u5355\u4f8b\u3002\u56e0\u4e3a\u76f8\u518c\u5bf9\u5e94\u7684\u591a\u4e2a\u754c\u9762\uff0c\u5305\u62ecfragment\u548cactivity\uff0c\u5176\u6838\u5fc3\u6570\u636e\u90fd\u662fmediastore\u4e2d\u53d6\u51fa\u7684\u5a92\u4f53\u5bf9\u8c61\u3002\u56e0\u6b64\u9700\u8981\u4e00\u4e2a\u5168\u5c40\u7ba1\u7406mediadata\u7684\u5bf9\u8c61\uff0c\u907f\u514d\u53cd\u590d\u67e5\u8be2mediastore\uff0c\u548c\u4e92\u76f8\u4f20\u9012\u3002 class MediaDataManager @Inject constructor () { // \u5a92\u4f53\u6587\u4ef6\u5bf9\u8c61 private val _mediaFilesLocal : MutableLiveData < List < MediaFileLocal >> = MutableLiveData ( emptyList ()) val mediaFilesLocal : LiveData < List < MediaFileLocal >> get () = _mediaFilesLocal fun loadImage ( medias : List < MediaFileLocal > ) { _mediaFilesLocal . postValue ( medias ) } //\u56fe\u96c6\u5bf9\u8c61 val _HashMapMedias : MutableLiveData < WeakHashMap < String , ArrayList < BaseListMediaFileItem >>> = MutableLiveData ( WeakHashMap ()) } 4. \u754c\u9762\u5bfc\u822a \u00b6 \u4e3b\u754c\u9762\u91c7\u7528viewpager2. \u76f8\u518c\u4e3b\u754c\u9762\u4e3a\u590d\u6742\u754c\u9762\uff0c\u800c\u4e14\u6570\u636e\u91cf\u5927\uff0c\u9700\u8981\u5b9e\u65f6\u66f4\u65b0\u3002\u6240\u4ee5\u91c7\u7528viewpager2\u8fdb\u884c\u7f13\u5b58\u3002 \u91c7\u7528\u4e86viewpager2\u540e\u5bf9navigation \u5bfc\u822a\u7ec4\u4ef6\u5c31\u4e0d\u592a\u53cb\u597d\u3002\u56e0\u6b64\u4e3b\u754c\u9762\u4e0d\u518d\u4f7f\u7528\u5bfc\u822a\u7ec4\u4ef6\u3002 \u5bfc\u822a\u7ec4\u4ef6\u53ef\u7528\u4e8e\u5176\u4ed6\u975e\u4e3b\u8981\u754c\u9762\uff0c\u6bd4\u5982\u8bbe\u7f6e\u7b49\u3002 \u56e0\u4e3a\u641c\u7d22\u4e5f\u662f\u590d\u6742\u754c\u9762\uff0c\u9700\u8981\u9891\u7e41\u8c03\u7528\u3002\u56e0\u6b64\u4e5f\u8981\u4f5c\u4e3a\u4e00\u9875page\uff0c\u6765\u5229\u7528viewpager\u7684\u7f13\u5b58\u7279\u6027\u3002\u4f46\u76ee\u524d\u7684UI\u6ca1\u6709\u641c\u7d22tab\u3002 <?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:orientation= \"vertical\" > <androidx.appcompat.widget.Toolbar android:id= \"@+id/toolbar\" android:layout_width= \"match_parent\" android:layout_height= \"?android:actionBarSize\" /> <androidx.viewpager2.widget.ViewPager2 android:id= \"@+id/main_view_pager\" android:layout_width= \"match_parent\" android:layout_height= \"0dp\" android:layout_weight= \"1\" /> <com.google.android.material.bottomnavigation.BottomNavigationView android:id= \"@+id/bottom_nav\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" app:menu= \"@menu/bottom_navigation_menu\" /> </LinearLayout> override fun onCreate ( savedInstanceState : Bundle ? ) { super . onCreate ( savedInstanceState ) setContentView ( binding . root ) setSupportActionBar ( binding . toolbar ) binding . mainViewPager . isUserInputEnabled = false binding . mainViewPager . offscreenPageLimit = 3 val config = mutableListOf < Pair < Int , Supplier < out Fragment >>> () binding . bottomNav . menu . forEachIndexed { index , item -> config . add ( when ( item . itemId ) { R . id . timeline -> R . string . tab_photos to Supplier { TimeLineFragment () } R . id . search -> R . string . menu_search to Supplier { SearchFragment () } R . id . mediaSet -> R . string . tab_albums to Supplier { MediaSetFragment () } else -> R . string . tab_photos to Supplier { TimeLineFragment () } }) } binding . bottomNav . setupWithViewPager2 ( binding . mainViewPager , supportFragmentManager , lifecycle , config ) binding . toolbar . setupWithViewPager2 ( binding . mainViewPager , config ) } 5. \u5a92\u4f53\u5355\u5f20\u9884\u89c8 \u00b6 \u7167\u7247\u5355\u5f20\u9884\u89c8\u5165\u53e3\u4e3aMediaPagerActivity.java \u901a\u8fc7 MediaPagerAdapter\u6309\u7167\u7167\u7247\u7c7b\u578b\u8fdb\u5165\u5bf9\u5e94\u7684\u9884\u89c8fragment override fun createFragment ( position : Int ): Fragment { when ( mediaFiles [ position ] . detailMedia . name ) { \"jpg/png\" -> return ImageFragment . newInstance ( position ) \"video\" -> return VideoFragment . newInstance ( position ) \"gif\" -> return GifFragment . newInstance ( position ) else -> return FastImageFragment . newInstance ( position ) } } ImageFragment \u91c7\u7528imagesapling scale\u8fdb\u884c\u89e3\u7801\u9884\u89c8 GifFragment \u7528\u4e8egif\u9884\u89c8,\u91c7\u7528glide\u89e3\u7801 VideoFragment \u7528\u4e8e\u89c6\u9891\u9884\u89c8,\u76ee\u524d\u76f8\u518c\u672a\u5185\u7f6e\u89c6\u9891\u64ad\u653e\uff0c\u8df3\u8f6c\u5230\u5916\u90e8\u89c6\u9891\u64ad\u653e FastImageFragment \u9664\u4e0a\u8ff0\u7c7b\u578b\u5916\u7684\u5176\u4ed6\u7c7b\u578b,\u4ee5\u53ca\u672a\u77e5\u7c7b\u578b\u7684\u9884\u89c8, \u91c7\u7528imagezoom\u8fdb\u884c\u9884\u89c8 \u56db . \u5173\u4e8e\u9886\u57df\u5c42 Domain Layer \u00b6 https://fernandocejas.com/blog/engineering/2021-01-23-writing-first-class-features-bdd-gherkin/","title":"Home"},{"location":"#_1","text":"\u7248\u672c \u4fee\u6539\u65e5\u671f \u4f5c\u8005 \u4fee\u6539\u5185\u5bb9 V1.0 2022.01.12 \u987e\u6797\u6210 \u521b\u5efa","title":"\u4fee\u6539\u8bb0\u5f55"},{"location":"#_2","text":"\u94fe\u63a5 https://sherlockhouse.github.io/","title":"\u76f8\u518c\u5f00\u53d1\u6587\u6863"},{"location":"#_3","text":"app/ \u251c\u2500\u2500 assets # tensorflow lite \u6a21\u578b\u6587\u4ef6\u7b49 \u251c\u2500\u2500 java \u2502 \u2514\u2500\u2500 core #\u4e3b\u8981\u7684\u62bd\u8c61\u6846\u67b6 \u2502 \u251c\u2500\u2500 customview #\u81ea\u5b9a\u4e49view \u2502 \u251c\u2500\u2500 db #\u81ea\u5b9a\u4e49\u6570\u636e\u5e93 \u2502 \u251c\u2500\u2500 di #\u5168\u5c40\u4f9d\u8d56\u6ce8\u5165 \u2502 \u251c\u2500\u2500 domain #\u9886\u57df \u2502 \u251c\u2500\u2500 models #MVVM - model \u2502 \u251c\u2500\u2500 repository #repository pattern \u2502 \u251c\u2500\u2500 ui #MVVM - view & viewmodel \u2502 \u2514\u2500\u2500 utils #\u5de5\u5177\u7c7b\u548c\u6269\u5c55\u51fd\u6570 google/ # \u539f\u751f\u5e73\u53f0\u53ef\u590d\u7528\u7684\u4ee3\u7801 matisse/ # \u77e5\u4e4e\u5f00\u6e90\u7684\u56fe\u7247\u9009\u62e9\u5e93","title":"\u4e00 . \u76ee\u5f55\u7ed3\u6784"},{"location":"#_4","text":"\u754c\u9762\u5bfc\u822a \u91c7\u7528ViewPager2 + Recyclerview + Fragment \u4ee3\u66ff\u539f\u751fOpenGL\u5b9e\u73b0 \u7f29\u7565\u56fe\u89e3\u7801 \u4f7f\u7528\u8c37\u6b4c\u7684Glide \u56fe\u7247\u9ad8\u6e05\u9884\u89c8 subsampling-scale-image-view\u3002\u53ea\u652f\u6301jpg\u548cpng \u667a\u80fd\u5206\u7c7b tensorflowlite. \u4f7f\u7528\u8c37\u6b4c\u5f00\u6e90\u7684\u9884\u8bad\u7ec3\u6a21\u578b,\u6a21\u578b\u6587\u4ef6\u5728asset\u76ee\u5f55 * \u7f16\u8f91 \u539f\u751f\u7684\u7f16\u8f91\u529f\u80fd,\u76ee\u5f55 /app/src/main/java/com/android/gallery3d/filtershow/ \u4fee\u6539\u4e86\u77e5\u4e4e\u5f00\u6e90\u7684matisse \u56fe\u7247\u9009\u62e9\u6a21\u5757","title":"\u4e8c . \u529f\u80fd\u6a21\u5757"},{"location":"#_5","text":"","title":"\u4e09 . \u8be6\u7ec6\u8bbe\u8ba1"},{"location":"#1","text":"\u5728Android.manifest\u4e2d,\u914d\u7f6e. \u914d\u7f6e\u540e,\u5f53\u524dactivity\u4f1a\u5e94\u7528\u7cfb\u7edf\u6837\u5f0f.\u540c\u65f6\u81ea\u5b9a\u4e49\u6837\u5f0f\u5931\u6548\uff0c\u65e0\u6cd5\u4f7f\u7528compat\u548cmaterial\u4e3b\u9898. \u56e0\u6b64\u53ea\u7528\u4e8e\u975e\u91cd\u8981\u7684activity\u3002\u4e3bactivity\u63a7\u4ef6\u4e3b\u9898\u6548\u679c\u5b8c\u5168\u81ea\u5df1\u63a7\u5236\u3002 <meta-data android:name= \"com.freeme.app.theme\" android:value= \"freeme:style/Theme.Freeme.NoActionBar.DayNight\" />","title":"1. \u4e3b\u9898"},{"location":"#2","text":"\u56fe\u5e93\u6570\u636e\u4e3b\u8981\u5305\u62ec\u76f8\u518c\u76ee\u5f55\u548c\u5a92\u4f53\u6587\u4ef6 //\u5355\u4e2a\u7167\u7247 data class DetailMediaFile ( var id : Long , var name : String ? , var dateAdded : Long ? , var dateTaken : Long ? , var dateModified : Long ? , val uri : Uri , var path : String ? , var parentPath : String ? , var size : Long ? , var type : Int ? , var videoDuration : Int ? , var isFavorite : Boolean = false , var deletedTS : Long ? , var bucketId : Long ? , ) //\u76f8\u7247\u76ee\u5f55 data class DetailMediaSet ( val name : String , val id : Int , val dateAdded : Long , val dateTaken : Long , val uri : Uri , var count : Int , var order : Int , ) \u6570\u636e\u5bf9\u8c61\u5b9e\u73b0BaseListMediaFileItem\u63a5\u53e3\uff0c\u7528\u4e8e\u5728recyclerview\u4e2d\u914d\u7f6e\u4e0d\u540c\u7684viewholder\uff0c\u4ee5\u53ca\u4f7f\u7528DiffUtil open class BaseListMediaFileItem ( val viewType : Int ) { fun isSame ( other : BaseListMediaFileItem ): Boolean { if ( this is MediaFileItem && other is MediaFileItem ) { return this . detailMedia . uri == other . detailMedia . uri } else if ( this is MediaFileHeaderItem && other is MediaFileHeaderItem ) { return this . text == other . text } return false } var gridPosition : Int = 0 enum class Type { HEADER , DATA } data class MediaFileHeaderItem ( val text : String ) : BaseListMediaFileItem ( Type . HEADER . ordinal ) }","title":"2. \u5a92\u4f53\u6570\u636e\u7ed3\u6784"},{"location":"#3","text":"MediaDataManager\u4e3a\u5168\u5c40\u5355\u4f8b\u3002\u56e0\u4e3a\u76f8\u518c\u5bf9\u5e94\u7684\u591a\u4e2a\u754c\u9762\uff0c\u5305\u62ecfragment\u548cactivity\uff0c\u5176\u6838\u5fc3\u6570\u636e\u90fd\u662fmediastore\u4e2d\u53d6\u51fa\u7684\u5a92\u4f53\u5bf9\u8c61\u3002\u56e0\u6b64\u9700\u8981\u4e00\u4e2a\u5168\u5c40\u7ba1\u7406mediadata\u7684\u5bf9\u8c61\uff0c\u907f\u514d\u53cd\u590d\u67e5\u8be2mediastore\uff0c\u548c\u4e92\u76f8\u4f20\u9012\u3002 class MediaDataManager @Inject constructor () { // \u5a92\u4f53\u6587\u4ef6\u5bf9\u8c61 private val _mediaFilesLocal : MutableLiveData < List < MediaFileLocal >> = MutableLiveData ( emptyList ()) val mediaFilesLocal : LiveData < List < MediaFileLocal >> get () = _mediaFilesLocal fun loadImage ( medias : List < MediaFileLocal > ) { _mediaFilesLocal . postValue ( medias ) } //\u56fe\u96c6\u5bf9\u8c61 val _HashMapMedias : MutableLiveData < WeakHashMap < String , ArrayList < BaseListMediaFileItem >>> = MutableLiveData ( WeakHashMap ()) }","title":"3. \u5168\u5c40\u6570\u636e\u7ba1\u7406\u5bf9\u8c61"},{"location":"#4","text":"\u4e3b\u754c\u9762\u91c7\u7528viewpager2. \u76f8\u518c\u4e3b\u754c\u9762\u4e3a\u590d\u6742\u754c\u9762\uff0c\u800c\u4e14\u6570\u636e\u91cf\u5927\uff0c\u9700\u8981\u5b9e\u65f6\u66f4\u65b0\u3002\u6240\u4ee5\u91c7\u7528viewpager2\u8fdb\u884c\u7f13\u5b58\u3002 \u91c7\u7528\u4e86viewpager2\u540e\u5bf9navigation \u5bfc\u822a\u7ec4\u4ef6\u5c31\u4e0d\u592a\u53cb\u597d\u3002\u56e0\u6b64\u4e3b\u754c\u9762\u4e0d\u518d\u4f7f\u7528\u5bfc\u822a\u7ec4\u4ef6\u3002 \u5bfc\u822a\u7ec4\u4ef6\u53ef\u7528\u4e8e\u5176\u4ed6\u975e\u4e3b\u8981\u754c\u9762\uff0c\u6bd4\u5982\u8bbe\u7f6e\u7b49\u3002 \u56e0\u4e3a\u641c\u7d22\u4e5f\u662f\u590d\u6742\u754c\u9762\uff0c\u9700\u8981\u9891\u7e41\u8c03\u7528\u3002\u56e0\u6b64\u4e5f\u8981\u4f5c\u4e3a\u4e00\u9875page\uff0c\u6765\u5229\u7528viewpager\u7684\u7f13\u5b58\u7279\u6027\u3002\u4f46\u76ee\u524d\u7684UI\u6ca1\u6709\u641c\u7d22tab\u3002 <?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" android:orientation= \"vertical\" > <androidx.appcompat.widget.Toolbar android:id= \"@+id/toolbar\" android:layout_width= \"match_parent\" android:layout_height= \"?android:actionBarSize\" /> <androidx.viewpager2.widget.ViewPager2 android:id= \"@+id/main_view_pager\" android:layout_width= \"match_parent\" android:layout_height= \"0dp\" android:layout_weight= \"1\" /> <com.google.android.material.bottomnavigation.BottomNavigationView android:id= \"@+id/bottom_nav\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" app:menu= \"@menu/bottom_navigation_menu\" /> </LinearLayout> override fun onCreate ( savedInstanceState : Bundle ? ) { super . onCreate ( savedInstanceState ) setContentView ( binding . root ) setSupportActionBar ( binding . toolbar ) binding . mainViewPager . isUserInputEnabled = false binding . mainViewPager . offscreenPageLimit = 3 val config = mutableListOf < Pair < Int , Supplier < out Fragment >>> () binding . bottomNav . menu . forEachIndexed { index , item -> config . add ( when ( item . itemId ) { R . id . timeline -> R . string . tab_photos to Supplier { TimeLineFragment () } R . id . search -> R . string . menu_search to Supplier { SearchFragment () } R . id . mediaSet -> R . string . tab_albums to Supplier { MediaSetFragment () } else -> R . string . tab_photos to Supplier { TimeLineFragment () } }) } binding . bottomNav . setupWithViewPager2 ( binding . mainViewPager , supportFragmentManager , lifecycle , config ) binding . toolbar . setupWithViewPager2 ( binding . mainViewPager , config ) }","title":"4. \u754c\u9762\u5bfc\u822a"},{"location":"#5","text":"\u7167\u7247\u5355\u5f20\u9884\u89c8\u5165\u53e3\u4e3aMediaPagerActivity.java \u901a\u8fc7 MediaPagerAdapter\u6309\u7167\u7167\u7247\u7c7b\u578b\u8fdb\u5165\u5bf9\u5e94\u7684\u9884\u89c8fragment override fun createFragment ( position : Int ): Fragment { when ( mediaFiles [ position ] . detailMedia . name ) { \"jpg/png\" -> return ImageFragment . newInstance ( position ) \"video\" -> return VideoFragment . newInstance ( position ) \"gif\" -> return GifFragment . newInstance ( position ) else -> return FastImageFragment . newInstance ( position ) } } ImageFragment \u91c7\u7528imagesapling scale\u8fdb\u884c\u89e3\u7801\u9884\u89c8 GifFragment \u7528\u4e8egif\u9884\u89c8,\u91c7\u7528glide\u89e3\u7801 VideoFragment \u7528\u4e8e\u89c6\u9891\u9884\u89c8,\u76ee\u524d\u76f8\u518c\u672a\u5185\u7f6e\u89c6\u9891\u64ad\u653e\uff0c\u8df3\u8f6c\u5230\u5916\u90e8\u89c6\u9891\u64ad\u653e FastImageFragment \u9664\u4e0a\u8ff0\u7c7b\u578b\u5916\u7684\u5176\u4ed6\u7c7b\u578b,\u4ee5\u53ca\u672a\u77e5\u7c7b\u578b\u7684\u9884\u89c8, \u91c7\u7528imagezoom\u8fdb\u884c\u9884\u89c8","title":"5. \u5a92\u4f53\u5355\u5f20\u9884\u89c8"},{"location":"#domain-layer","text":"https://fernandocejas.com/blog/engineering/2021-01-23-writing-first-class-features-bdd-gherkin/","title":"\u56db . \u5173\u4e8e\u9886\u57df\u5c42 Domain Layer"},{"location":"search_design/","text":"\u4fee\u6539\u8bb0\u5f55 \u641c\u7d22\u8bbe\u8ba1\u6982\u8981 \u4e00\u3001\u63cf\u8ff0 \u4fee\u6539\u8bb0\u5f55 \u00b6 \u7248\u672c \u4fee\u6539\u65e5\u671f \u4f5c\u8005 \u4fee\u6539\u5185\u5bb9 V1.0 2020.10.31 \u987e\u6797\u6210 \u521b\u5efa \u641c\u7d22\u8bbe\u8ba1\u6982\u8981 \u00b6 \u4e00\u3001\u63cf\u8ff0 \u00b6 * \u641c\u7d22\u5206\u5b57\u6bb5\u5339\u914d\u641c\u7d22\u548cFTS \u5206\u8bcd\u641c\u7d22 * \u6587\u4ef6\u540d\u641c\u7d22\u7684\u4f18\u5148\u7ea7\u6700\u4f4e\uff0c\u56e0\u4e3a\u901f\u5ea6\u6700\u6162\uff08\u8c37\u6b4c\u652f\u6301\u6587\u4ef6\u540d\u641c\u7d22\uff0c\u4e0d\u652f\u6301\u91cd\u547d\u540d\uff09,\u6587\u4ef6\u540d\u4f5c\u4e3a\u810f\u6570\u636e\uff0c\u4e0d\u4e88\u68c0\u7d22 * \u540c\u65f6\uff0c\u76f8\u518c\u4e0d\u9700\u8981\u91cd\u547d\u540d\uff0c\u91cd\u547d\u540d\u7531\u6587\u4ef6\u7ba1\u7406\u5668\u5b9e\u73b0\uff0c\u91cd\u547d\u540d\u4f1a\u89e6\u53d1\u5a92\u4f53\u5e93\u66f4\u65b0\uff0c\u6bd4\u8f83\u8017\u65f6\u3002\u76f8\u518c\u63d0\u4f9b\u4fe1\u606f\u5907\u6ce8\uff0c\u548c\u7167\u7247\u683c\u5f0f\u4fe1\u606f * \u5206\u8bcd\u641c\u7d22\u5e94\u7528\u4e8e\u6587\u4ef6\u63cf\u8ff0\uff0c\u7528\u6237\u81ea\u5b9a\u4e49\u4fe1\u606f\uff0c\u672c\u5730\u670b\u53cb\u5708 * \u5b57\u6bb5\u5339\u914d\u7528\u4e8e\u6587\u4ef6\u5939\u540d\u5b57\uff0c\u5206\u7c7b\u540d\u5b57\uff0c\u65e5\u671f\uff0c\u5730\u70b9\uff0c\u7b49\u6570\u636e\u8f83\u5c11\u7684\u6587\u5b57\u5339\u914d\u3002 * \u5168\u5c40\u641c\u7d22\u53ea\u4ece\u6570\u636e\u5e93\u4e2d\u68c0\u7d22\uff0c\u540c\u65f6\u589e\u52a0\u5f53\u524d\u9875\u9762\u641c\u7d22\uff0c\u4ece\u5185\u5b58\u6570\u636e\u4e2d\u67e5\u627e\u3002 \u5927\u6570\u636e\u91cf\uff0c\u4e0d\u8981\u9891\u7e41destory\u3002\u9700\u8981viewpager + navigation \u7531\u4e8e\u4ee5\u4e0b\u539f\u56e0\uff0cbottomnavigationview \u70b9\u51fb\u4f1a\u91cd\u65b0\u521b\u5efafragment What you are describing is the default behavior of the navigation component. when navigating down , the fragment you navigated from is not destroyed, only when navigating up . personally I don't understand why you would want to notify the viewModel the fragment is destroyed, but if you want to run a certain piece of code when you are navigating to another destination, you could use NavController.OnDestinationChangedListener in your main activity (or in your fragment, but don't forget to remove the listener when it is destroyed), and do some action according to your start and end destinations. \u8c37\u6b4c\u7684single activity \u539f\u5219\u3002 \u5c06viewpager\u4f5c\u4e3a\u4e00\u4e2afragment\u5bfc\u822a\u8282\u70b9\u3002\u7528activity \u4e2d\u7684navi graph \u505a\u5bfc\u822a\u3002 \u6539\u53d8\u9ed8\u8ba4\u957f\u6309\u884c\u4e3a","title":"Search design"},{"location":"search_design/#_1","text":"\u7248\u672c \u4fee\u6539\u65e5\u671f \u4f5c\u8005 \u4fee\u6539\u5185\u5bb9 V1.0 2020.10.31 \u987e\u6797\u6210 \u521b\u5efa","title":"\u4fee\u6539\u8bb0\u5f55"},{"location":"search_design/#_2","text":"","title":"\u641c\u7d22\u8bbe\u8ba1\u6982\u8981"},{"location":"search_design/#_3","text":"* \u641c\u7d22\u5206\u5b57\u6bb5\u5339\u914d\u641c\u7d22\u548cFTS \u5206\u8bcd\u641c\u7d22 * \u6587\u4ef6\u540d\u641c\u7d22\u7684\u4f18\u5148\u7ea7\u6700\u4f4e\uff0c\u56e0\u4e3a\u901f\u5ea6\u6700\u6162\uff08\u8c37\u6b4c\u652f\u6301\u6587\u4ef6\u540d\u641c\u7d22\uff0c\u4e0d\u652f\u6301\u91cd\u547d\u540d\uff09,\u6587\u4ef6\u540d\u4f5c\u4e3a\u810f\u6570\u636e\uff0c\u4e0d\u4e88\u68c0\u7d22 * \u540c\u65f6\uff0c\u76f8\u518c\u4e0d\u9700\u8981\u91cd\u547d\u540d\uff0c\u91cd\u547d\u540d\u7531\u6587\u4ef6\u7ba1\u7406\u5668\u5b9e\u73b0\uff0c\u91cd\u547d\u540d\u4f1a\u89e6\u53d1\u5a92\u4f53\u5e93\u66f4\u65b0\uff0c\u6bd4\u8f83\u8017\u65f6\u3002\u76f8\u518c\u63d0\u4f9b\u4fe1\u606f\u5907\u6ce8\uff0c\u548c\u7167\u7247\u683c\u5f0f\u4fe1\u606f * \u5206\u8bcd\u641c\u7d22\u5e94\u7528\u4e8e\u6587\u4ef6\u63cf\u8ff0\uff0c\u7528\u6237\u81ea\u5b9a\u4e49\u4fe1\u606f\uff0c\u672c\u5730\u670b\u53cb\u5708 * \u5b57\u6bb5\u5339\u914d\u7528\u4e8e\u6587\u4ef6\u5939\u540d\u5b57\uff0c\u5206\u7c7b\u540d\u5b57\uff0c\u65e5\u671f\uff0c\u5730\u70b9\uff0c\u7b49\u6570\u636e\u8f83\u5c11\u7684\u6587\u5b57\u5339\u914d\u3002 * \u5168\u5c40\u641c\u7d22\u53ea\u4ece\u6570\u636e\u5e93\u4e2d\u68c0\u7d22\uff0c\u540c\u65f6\u589e\u52a0\u5f53\u524d\u9875\u9762\u641c\u7d22\uff0c\u4ece\u5185\u5b58\u6570\u636e\u4e2d\u67e5\u627e\u3002 \u5927\u6570\u636e\u91cf\uff0c\u4e0d\u8981\u9891\u7e41destory\u3002\u9700\u8981viewpager + navigation \u7531\u4e8e\u4ee5\u4e0b\u539f\u56e0\uff0cbottomnavigationview \u70b9\u51fb\u4f1a\u91cd\u65b0\u521b\u5efafragment What you are describing is the default behavior of the navigation component. when navigating down , the fragment you navigated from is not destroyed, only when navigating up . personally I don't understand why you would want to notify the viewModel the fragment is destroyed, but if you want to run a certain piece of code when you are navigating to another destination, you could use NavController.OnDestinationChangedListener in your main activity (or in your fragment, but don't forget to remove the listener when it is destroyed), and do some action according to your start and end destinations. \u8c37\u6b4c\u7684single activity \u539f\u5219\u3002 \u5c06viewpager\u4f5c\u4e3a\u4e00\u4e2afragment\u5bfc\u822a\u8282\u70b9\u3002\u7528activity \u4e2d\u7684navi graph \u505a\u5bfc\u822a\u3002 \u6539\u53d8\u9ed8\u8ba4\u957f\u6309\u884c\u4e3a","title":"\u4e00\u3001\u63cf\u8ff0"}]}